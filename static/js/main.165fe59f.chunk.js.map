{"version":3,"sources":["lib/components/Iframe/index.jsx","lib/components/FloatingChat/index.jsx","lib/RumbleTalk.jsx","App.js","index.js"],"names":["Iframe","React","forwardRef","ref","style","src","onLoad","title","frameBorder","allow","allowtransparency","width","height","cdn","FloatingChat","side","isMobile","openChat","toggleFloatingChat","chatBubble","image","onImageLoad","onIframeLoad","counter","counters","userCount","floatingChat","className","onClick","alt","top","left","right","e","protocol","baseWebUrl","serviceRelativeUrl","postMessageEvents","RumbleTalk","props","loadIframe","a","hash","axios","get","res","server","data","address","setState","window","location","href","addListeners","addEventListener","info","mobile","floating","escClose","event","key","isFinite","clearInterval","messageInterval","toString","reload","iframeRef","current","HTMLIFrameElement","iframeHasLoaded","setInterval","query","target","origin","nativeElement","contentWindow","postMessage","ignore","esc","stopPropagation","state","overflow","iframeInterval","link","iframe","focus","tempIframe","open","closed","handleImageLoad","bottom","login","message","username","trim","validateUsername","Error","password","validatePassword","validateUrl","type","forceLogin","intervalHandle","handlePostMessage","this","validateChatOrigin","console","log","removeEventListener","callback","status","bind","logout","userId","logoutCB","reason","openPrivateChat","error","name","str","replace","test","length","url","createRef","ua","navigator","userAgent","toUpperCase","indexOf","counterArr","split","counterTop","Number","counterLeft","isNaN","Component","defaultProps","App","handleInputChange","value","rumbleTalkRef","placeholder","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.165fe59f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Iframe = React.forwardRef(({ style, src, onLoad }, ref) => {\n  return (\n    <iframe\n      title='iframe'\n      frameBorder='0'\n      allow='microphone; camera; fullscreen; autoplay'\n      allowtransparency='true'\n      ref={ref}\n      style={{\n        width: !!style && style.width ? `${style.width}px` : '100%',\n        height: !!style && style.height ? `${style.height}px` : '100%',\n      }}\n      src={src}\n      onLoad={onLoad}\n    ></iframe>\n  );\n});\n\nIframe.propTypes = {\n  src: PropTypes.string.isRequired,\n  onLoad: PropTypes.func.isRequired,\n  style: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n};\n\nexport default Iframe;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// import './style.css';\nimport Iframe from './../Iframe';\n\nconst cdn = 'https://d1pfint8izqszg.cloudfront.net';\n\nconst FloatingChat = React.forwardRef(\n  (\n    {\n      side,\n      isMobile,\n      openChat,\n      toggleFloatingChat,\n      chatBubble,\n      image,\n      onImageLoad,\n      onIframeLoad,\n      counter,\n      counters,\n      userCount,\n      floatingChat,\n      width,\n      height,\n      src,\n    },\n    ref\n  ) => {\n    return (\n      <div\n        className={`rumbletalk-floating rumbletalk-floating-${side}`}\n        onClick={isMobile ? openChat : toggleFloatingChat}\n        style={{\n          width: `${chatBubble.width}px`,\n          height: `${chatBubble.height}px`,\n        }}\n      >\n        <img\n          alt='Click to join the conversation'\n          title='Click to join the conversation'\n          src={image}\n          className={side}\n          onLoad={onImageLoad}\n        />\n\n        {counter && (\n          <div\n            className='counter-div'\n            style={{ top: `${counters.top}px`, left: `${counters.left}px` }}\n          >\n            {!isMobile && !userCount && (\n              <img alt='loading' src={`${cdn}/images/toolbar/mini_wait.gif`} />\n            )}\n            {!isMobile && userCount}\n          </div>\n        )}\n\n        {!isMobile && (\n          <div\n            className={`chat-div chat-div-${floatingChat.className} chat-div-${side}`}\n            style={floatingChat.style}\n          >\n            <img\n              className='close-button'\n              alt='close'\n              src={`${cdn}/images/c.png`}\n              style={{\n                left: side === 'left' ? 'auto' : '-8px',\n                right: side === 'right' ? 'auto' : '-8px',\n              }}\n              onClick={(e) => toggleFloatingChat(e)}\n            />\n\n            <Iframe\n              ref={ref}\n              style={{ width, height }}\n              src={src}\n              onLoad={onIframeLoad}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nFloatingChat.propTypes = {\n  side: PropTypes.string.isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  openChat: PropTypes.func,\n  toggleFloatingChat: PropTypes.func,\n  chatBubble: PropTypes.shape({\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  image: PropTypes.string,\n  onImageLoad: PropTypes.func,\n  onIframeLoad: PropTypes.func.isRequired,\n  counter: PropTypes.string,\n  counters: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n  }),\n  userCount: PropTypes.string,\n  floatingChat: PropTypes.shape({\n    className: PropTypes.string,\n    style: PropTypes.shape({\n      overflow: PropTypes.string,\n      bottom: PropTypes.string,\n    }),\n  }),\n  width: PropTypes.number,\n  height: PropTypes.number,\n  src: PropTypes.string.isRequired,\n};\n\nexport default FloatingChat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\n// import './RumbleTalk.css';\nimport Iframe from './components/Iframe';\nimport FloatingChat from './components/FloatingChat';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://rumbletalk.com';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nconst postMessageEvents = {\n  LOGOUT_CB: 'pm.1',\n  LOGOUT_CB_RECEIVED: 'pm.2',\n  LOGIN: 'pm.3',\n  LOGIN_SUCCESS: 'pm.4',\n  LOGIN_ALREADY_LOGGED_IN: 'pm.5',\n  LOGOUT: 'pm.6',\n  OPEN_PRIVATE_CHAT: 'pm.7'\n};\n\nclass RumbleTalk extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counters: {\n        top: 14,\n        left: 23,\n      },\n      src: null,\n      userCount: null,\n      floatingChat: {\n        className: 'out',\n        style: {\n          overflow: 'hidden',\n          bottom: 'auto',\n        },\n      },\n      chatBubble: {\n        height: 'auto',\n        width: 'auto',\n      },\n    };\n\n    this.server = null;\n    this.messageInterval = null;\n    this.iframeRef = React.createRef();\n    const ua = navigator.userAgent.toUpperCase();\n    this.mobile =\n      ua.indexOf('MOBILE') !== -1 ||\n      ua.indexOf('ANDROID') !== -1 ||\n      ua.indexOf('IOS') !== -1;\n  }\n\n  loadIframe = async () => {\n    const { hash } = this.props;\n    const res = await axios.get(`${baseWebUrl}/${serviceRelativeUrl}${hash}`);\n    this.server = res.data.address;\n\n    this.setState({\n      src: `https://${this.server}/${hash}/#${window.location.href}`,\n    });\n  };\n\n  /**\n   * add the event listeners based on the type and device\n   */\n  addListeners = () => {\n    window.addEventListener('message', this.info, false);\n\n    if (!this.mobile && this.props.floating) {\n      window.addEventListener('keyup', this.escClose, false);\n    }\n  };\n\n  /**\n   * hides the chat when the \"Esc\" key is clicked\n   * @param {KeyboardEvent} event - the initiating event\n   */\n  escClose = (event) => {\n    if (event.key === 'Escape') {\n      this.toggleFloatingChat(null, true);\n    }\n  };\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info = (event) => {\n    if (isFinite(event.data)) {\n      clearInterval(this.messageInterval);\n\n      if (this.props.counter) {\n        this.setState({ userCount: event.data.toString() });\n      }\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  };\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload = async () => {\n    try {\n      const res = await axios.get(\n        `${baseWebUrl}/${serviceRelativeUrl}${this.props.hash}}`\n      );\n      this.server = res.data.address;\n\n      if (this.iframeRef.current instanceof HTMLIFrameElement) {\n        this.setState({\n          src: `${protocol}${this.server}/${this.hash}/#${window.location.href}`,\n        });\n      } else {\n        this.iframeRef.current.location.href = this.server;\n      }\n    } catch (ignore) {}\n  };\n\n  iframeHasLoaded = () => {\n    this.messageInterval = setInterval(this.query, 1000);\n  };\n\n  query = () => {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeRef.current.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeRef.current.contentWindow;\n        origin = protocol + this.server;\n      } else {\n        target = this.iframeRef.current;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  };\n\n  toggleFloatingChat = (event, esc) => {\n    if (event) {\n      event.stopPropagation();\n    }\n\n    const { floatingChat } = this.state;\n\n    if (floatingChat.className === 'out') {\n      if (esc) {\n        return;\n      }\n\n      floatingChat.className = 'in';\n      floatingChat.style = { ...floatingChat, overflow: 'visible' };\n    } else {\n      floatingChat.className = 'out';\n      floatingChat.style = { ...floatingChat, overflow: 'hidden' };\n    }\n\n    this.setState({ floatingChat });\n  };\n\n  /** attaches the open chat event to the given target */\n  openChat = () => {\n    const link = `${baseWebUrl}client/chat.php?${this.hash}/#${window.location.href}`;\n    const iframe = this.iframeRef.current;\n    let iframeInterval;\n\n    if (iframe) {\n      iframe.nativeElement.focus();\n    } else {\n      const tempIframe = window.open(link);\n      iframeInterval = setInterval(() => {\n        if (tempIframe.closed) {\n          clearInterval(iframeInterval);\n        }\n      }, 100);\n    }\n  };\n\n  handleImageLoad = (event) => {\n    const { floatingChat, chatBubble } = this.state;\n    chatBubble.height = event.target.height;\n    chatBubble.width = event.target.width;\n    floatingChat.style = {\n      ...floatingChat.style,\n      bottom: `${event.target.height}px`,\n    };\n\n    this.setState({ floatingChat, chatBubble });\n  };\n\n  login = (data) => {\n    const message = {};\n\n    /* handle username value */\n    message.username = this.trim(data.username);\n    if (!this.validateUsername(message.username)) {\n      throw new Error('Error: invalid username in \"login\" function');\n    }\n\n    /* handle, if set, password value */\n    if (data.password) {\n      if (!this.validatePassword(data.password)) {\n        throw new Error('Error: invalid password in \"login\" function');\n      }\n      message.password = data.password;\n    }\n\n    /* handle, if set, image URL */\n    if (data.image) {\n      if (!this.validateUrl(data.image)) {\n        throw new Error('Error: invalid image in \"login\" function');\n      }\n      message.image = data.image;\n    }\n\n    message.type = postMessageEvents.LOGIN;\n    message.hash = data.hash;\n    message.forceLogin = data.forceLogin;\n\n    /* keep sending the data to the chat until the chat responds */\n    const intervalHandle = setInterval(() => {\n      this.postMessage(message);\n    }, 1000);\n\n    window.addEventListener(\n      'message',\n      function handlePostMessage(event) {\n        /* validates the origin to be from a chat */\n        if (!this.validateChatOrigin(event.origin)) {\n          console.log('Error: invalid origin in \"login\" function');\n        }\n\n        if (typeof event.data !== 'object') {\n          console.log(\n            `Error: invalid data received in RumbleTalk SDK: ${event.data}`\n          );\n        }\n\n        /* different chat callback */\n        if (event.data.hash !== data.hash) {\n          throw new Error('Error: chat hash mismatch');\n        }\n\n        /* validate that the message is of a successful login of the specific chat */\n        if (\n          event.data.type === postMessageEvents.LOGIN_SUCCESS ||\n          event.data.type === postMessageEvents.LOGIN_ALREADY_LOGGED_IN\n        ) {\n          clearInterval(intervalHandle);\n          window.removeEventListener('message', handlePostMessage);\n\n          data.callback({\n            status: event.data.type,\n            message:\n              event.data.type === postMessageEvents.LOGIN_SUCCESS\n                ? 'success'\n                : 'already logged in',\n          });\n        }\n      }.bind(this),\n      false\n    );\n  };\n\n  logout = (data) => {\n    const message = {\n      type: postMessageEvents.LOGOUT,\n      hash: data.hash,\n    };\n\n    if (data.userId) {\n      message.userId = data.userId;\n    }\n\n    if (data.username) {\n      message.username = data.username;\n    }\n\n    this.postMessage(message);\n  };\n\n  logoutCB = (data) => {\n    const intervalHandle = setInterval(() => {\n      this.postMessage({ type: postMessageEvents.LOGOUT_CB });\n    }, 1000);\n\n    window.addEventListener(\n      'message',\n      (event) => {\n        /* validates the origin to be from a chat */\n        if (!this.validateChatOrigin(event.origin)) {\n          return;\n        }\n\n        /* expecting an object */\n        if (typeof event.data !== 'object') {\n          return;\n        }\n\n        /* different chat callback */\n        if (event.data.hash !== data.hash) {\n          return;\n        }\n\n        /* callback registered */\n        if (event.data.type === postMessageEvents.LOGOUT_CB_RECEIVED) {\n          clearInterval(intervalHandle);\n          return;\n        }\n\n        /* validate event type */\n        if (event.data.type !== postMessageEvents.LOGOUT_CB) {\n          return;\n        }\n\n        data.callback(event.data.reason);\n      },\n      false\n    );\n  };\n\n  openPrivateChat = (data) => {\n    const message = {\n      type: postMessageEvents.OPEN_PRIVATE_CHAT,\n      hash: data.hash\n    };\n\n    if (data.userId) {\n      message.userId = data.userId;\n    }\n\n    if (data.username) {\n      message.username = data.username;\n    }\n\n    this.postMessage(message);\n  };\n\n  postMessage = (data) => {\n    try {\n      const target =\n        this.iframeRef.current instanceof HTMLIFrameElement\n          ? this.iframeRef.current.contentWindow\n          : this.iframeRef.current;\n      target.postMessage(data, `${protocol}${this.server}`);\n    } catch (error) {\n      console.log(error.name, error.message);\n    }\n  };\n\n  trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n\n  validateUsername = (username) =>\n    !/^-?\\d+$/.test(username) && username.length < 64;\n\n  validatePassword = (password) => 0 < password.length && password.length < 51;\n\n  validateUrl = (url) =>\n    /(https?:)?\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/.test(\n      url\n    );\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateChatOrigin = (origin) =>\n    /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n\n  componentDidMount() {\n    const { floating, counter } = this.props;\n    const { counters } = this.state;\n\n    if (floating && counter) {\n      const counterArr = counter.split(':');\n\n      if (counterArr.length === 2) {\n        const counterTop = Number(counterArr[0]);\n        const counterLeft = Number(counterArr[1]);\n\n        if (!isNaN(counterTop)) {\n          counters.top = counterTop;\n        }\n\n        if (!isNaN(counterLeft)) {\n          counters.left = counterLeft;\n        }\n      }\n    }\n\n    this.addListeners();\n    this.setState({ counters }, this.loadIframe);\n  }\n\n  render() {\n    const { width, height, floating } = this.props;\n    const { src } = this.state;\n\n    if (!src) {\n      return null;\n    }\n\n    return floating ? (\n      <FloatingChat\n        {...this.props}\n        {...this.state}\n        ref={this.iframeRef}\n        isMobile={this.mobile}\n        openChat={this.openChat}\n        toggleFloatingChat={this.toggleFloatingChat}\n        onIframeLoad={this.iframeHasLoaded}\n        onImageLoad={this.handleImageLoad}\n      />\n    ) : (\n      <div\n        className='rumbletalk-embed'\n        style={{ width: `${width}px`, height: `${height}px` }}\n      >\n        <Iframe src={src} onLoad={this.iframeHasLoaded} ref={this.iframeRef} />\n      </div>\n    );\n  }\n}\n\nRumbleTalk.propTypes = {\n  hash: PropTypes.string.isRequired,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  floating: PropTypes.bool,\n  side: PropTypes.oneOf(['left', 'right']),\n  image: PropTypes.string,\n  counter: PropTypes.string,\n};\n\nRumbleTalk.defaultProps = {\n  width: 700,\n  height: 500,\n  floating: false,\n  side: 'right',\n  image: 'https://d1pfint8izqszg.cloudfront.net/images/toolbar/toolbar.png',\n};\n\nexport default RumbleTalk;\n","import React from 'react';\n\n// import './App.css';\nimport RumbleTalk from './lib/RumbleTalk';\n\n\nconst hash = 'ykUIwC4J';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n    };\n  }\n\n  componentDidMount() {\n    this.rumbleTalkRef = React.createRef();\n  }\n  \n\n  handleInputChange = (event, key) => {\n    this.setState({ [key]: event.target.value });\n  };\n\n  login = () => {\n    const { username, password } = this.state;\n    this.rumbleTalkRef.current.login({\n      hash,\n      username,\n      password,\n      callback: (res) => {\n        console.log('login callback', res);\n        this.setState({username: '', password: ''});\n      }\n    });\n  };\n\n  logout = () => {\n    this.rumbleTalkRef.current.logout({\n      hash,\n      username: this.state.username,\n    });\n  };\n\n  logoutCB = () => {\n    this.rumbleTalkRef.current.logoutCB({\n      hash,\n      username: this.state.username,\n      callback: (reason) => console.log('logout callback', reason),\n    });\n  };\n\n  openPrivateChat = () => {\n    this.rumbleTalkRef.current.openPrivateChat({\n      hash,\n      username: this.state.username,\n    });\n  };\n\n  render() {\n    const { username, password } = this.state;\n\n    return (\n      <div className='main'>\n        <RumbleTalk\n          floating\n          hash={hash}\n          width={700}\n          height={500}\n          counter='14:23'\n          ref={this.rumbleTalkRef}\n        />\n        <div className='form'>\n          <input\n            type='text'\n            placeholder='username'\n            value={username}\n            onChange={(e) => this.handleInputChange(e, 'username')}\n          />\n          <input\n            type='password'\n            placeholder='password'\n            value={password}\n            onChange={(e) => this.handleInputChange(e, 'password')}\n          />\n          <div className='buttons'>\n            <button onClick={this.login}>Login</button>\n            <button onClick={this.logout}>Logout</button>\n            <button onClick={this.logoutCB}>LogoutCB</button>\n            <button onClick={this.openPrivateChat}>Open Private Chat</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}